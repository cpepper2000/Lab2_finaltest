{"version":3,"sources":["BoardGrid.js","actions.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["BoardButton","this","props","sendTileDrop","x","board","y","classes","undefined","className","onClick","handleClick","Component","connect","state","dispatch","col","type","payload","dropTile","App","cells","row","push","BoardGrid","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","winnerFound","createStore","action","console","log","tile","current","concat","slice","alert","WinCheck","boardCounter","TieCheck","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.046cb250.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {dropTile} from './actions';\r\n\r\nclass BoardButton extends Component{ \r\n\r\n    //click event that starts the tile drop when a click is made\r\n    handleClick(){\r\n        this.props.sendTileDrop(this.props.x);\r\n        //call the method here \r\n    }\r\n\r\n    render(){\r\n\r\n      //aliasing some variables used\r\n      const board = this.props.board; \r\n      const x = this.props.x; \r\n      const y = this.props.y;\r\n\r\n      let classes = 'button';\r\n\r\n      //if statements to concatenate the type of player chip will be placed down\r\n      if(board[x][y] !== undefined){\r\n        if (board[x][y] === 'red') { \r\n          classes+= ' red';\r\n        }else{ \r\n          classes += ' yellow';\r\n        }\r\n      }\r\n      //returning the buttons to make the board, with their coordinates displayed on them\r\n      return(\r\n        <button className={classes} onClick={() => this.handleClick()}>\r\n          <p>{this.props.x}, {this.props.y}</p>\r\n        </button>\r\n      )\r\n    }\r\n  }\r\n\r\n  const stateToProps = state => {\r\n    return {\r\n      board: state.board,\r\n    };\r\n  };\r\n\r\n  const dispatchToProps = dispatch => { \r\n    return{\r\n      sendTileDrop: col => dispatch(dropTile(col)),\r\n    };\r\n  };\r\n\r\n  export default connect(stateToProps, dispatchToProps)(BoardButton); ","//when someone clicks on a column this is what happens\r\n//a tile is dropped on the col that is passed into this function (always sent to the bottom)\r\nexport function dropTile(col){\r\n    return{\r\n        type: 'DROP_TILE',\r\n        payload: col, \r\n    };\r\n}","import React from 'react';\nimport './App.css';\n\nimport BoardGrid from './BoardGrid';\n\nclass App extends React.Component{\n\n  render() { \n    const cells = []; \n    \n    //creating the grid of buttons stored in rows and columns\n    for( let y = 6; y >= 0; y--){\n      const row = []; \n\n      for (let x = 0; x < 7; x++){\n        // we need a unique key because each iteration will have its own x\n        row.push(<BoardGrid key ={x} x={x} y={y}/> )\n      }\n\n      cells.push(<div key={y} className=\"row\">{row}</div>)\n    }\n  \n    return (\n      <div className=\"App\">\n        {cells}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore} from 'redux';\r\n\r\n//initial state for the store\r\nconst initial = { \r\n    current: 'red', \r\n    board: [\r\n        [], //col 0\r\n        [], //col 1\r\n        [], //col 2\r\n        [], //col 3\r\n        [], //col 4\r\n        [], //col 5\r\n        [], //col 6\r\n    ],\r\n\r\n};\r\n\r\nexport let winnerFound = false;\r\n\r\nfunction reducer(state, action){\r\n    \r\n    //first loop will only allow users to play if a winner has not been found\r\n    if(winnerFound === false){ \r\n        \r\n        if ( action.type === 'DROP_TILE'){\r\n            console.log('dropping onto column ' + action.payload);\r\n            const tile = state.current;\r\n            \r\n            //these 3 lines will make a new column, make a copy of the board, and combine the two\r\n            const col = state.board[action.payload].concat(tile); //this will add the new tile to the old content in the column\r\n\r\n            const board = state.board.slice() //we should not be able to change the board directly and need to copy it \r\n            board[action.payload] = col; //updating the column with the new tile\r\n\r\n            console.log(board); \r\n            //will loop through the adjacent cells and identify if the person who has played wins\r\n            WinCheck(board);\r\n            //will check to see if the two players have tied\r\n            TieCheck(board);\r\n\r\n            // the state will be returned, if the last player was red, the next will be yellow and vice versa\r\n            return{\r\n                current: state.current === 'red' ? 'yellow' : 'red', \r\n                board: board,\r\n            };\r\n        }\r\n        return state;\r\n    }\r\n    else{\r\n        //allert is sent that the game is over\r\n        alert(\"The Game is Over\")\r\n        return state\r\n    }\r\n    \r\n}\r\n\r\nfunction TieCheck(board){ \r\n   \r\n    //iterating through the board and counting 1 to every full tile or location in the array\r\n    let boardCounter = 0; \r\n    for(let y=0;y<6;y++){\r\n        for (let x=0; x<7;x++){\r\n            if(typeof board[x][y]!== 'undefined'){\r\n                console.log(board[x][y]);\r\n                boardCounter++;\r\n            }\r\n        }\r\n    }\r\n\r\n    //if after counting for every button, the count is full indicating no more spots on the board, the game will be tied\r\n    if (boardCounter === 42){\r\n        alert(\"The Game is Tied\");\r\n        winnerFound = true; \r\n    }\r\n}\r\n\r\n\r\nfunction WinCheck(board){\r\n\r\n    //check for vertical winning for the user that just placed a piece\r\n    for(let y=0; y<6; y++) { \r\n        for(let x=0; x<7; x++) {\r\n            if(typeof board[x][y]!=='undefined' && typeof board[x][y+1]!=='undefined' && typeof board[x][y+2]!=='undefined' && typeof board[x][y+3]!=='undefined') {\r\n                if((board[x][y]===board[x][y+1] && board[x][y]===board[x][y+2] && board[x][y]===board[x][y+3])){\r\n                    alert(board[x][y]+\" is the winner\")\r\n                    winnerFound = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    for(let y=0; y<6; y++) {\r\n        \r\n        //horizontal win checker on one side of the board\r\n        if(typeof board[0][y]!=='undefined' && typeof board[1][y]!=='undefined' && typeof board[2][y]!=='undefined' && typeof board[3][y]!=='undefined') {\r\n            if((board[0][y]===board[1][y] && board[0][y]===board[2][y] && board[0][y]===board[3][y])){\r\n                alert(board[0][y]+\" is the winner\")\r\n                winnerFound = true\r\n            }\r\n        }\r\n        //horizontal winn checker one over \r\n        if(typeof board[1][y]!=='undefined' && typeof board[2][y]!=='undefined' && typeof board[3][y]!=='undefined' && typeof board[4][y]!=='undefined') {\r\n            if((board[1][y]===board[2][y] && board[1][y]===board[3][y] && board[1][y]===board[4][y])){\r\n                alert(board[1][y]+\" is the winner\")\r\n                winnerFound = true\r\n            }\r\n        }\r\n        //horizontal win checker two over\r\n        if(typeof board[2][y]!=='undefined' && typeof board[3][y]!=='undefined' && typeof board[4][y]!=='undefined' && typeof board[5][y]!=='undefined') {\r\n            if((board[2][y]===board[3][y] && board[2][y]===board[4][y] && board[2][y]===board[5][y])){\r\n                alert(board[2][y]+\" is the winner\")\r\n                winnerFound = true\r\n            }\r\n        }\r\n        //horizontal win checker 3 over\r\n        if(typeof board[3][y]!=='undefined' && typeof board[4][y]!=='undefined' && typeof board[5][y]!=='undefined' && typeof board[6][y]!=='undefined') {\r\n            if((board[3][y]===board[4][y] && board[3][y]===board[5][y] && board[3][y]===board[6][y])){\r\n                alert(board[3][y]+\" is the winner\")\r\n                winnerFound = true\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default createStore (reducer, initial);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n \nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}